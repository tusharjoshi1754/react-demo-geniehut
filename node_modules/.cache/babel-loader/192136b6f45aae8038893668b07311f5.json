{"ast":null,"code":"import compareAsc from '../compareAsc/index.js';\nimport eachDayOfInterval from '../eachDayOfInterval/index.js';\nimport isValid from '../isValid/index.js';\nimport isWeekend from '../isWeekend/index.js';\nimport toDate from '../toDate/index.js';\n/**\n * @name differenceInBusinessDays\n * @category Day Helpers\n * @summary Get the number of business days between the given dates.\n *\n * @description\n * Get the number of business day periods between the given dates.\n * Business days being days that arent in the weekend.\n * Like `differenceInCalendarDays`, the function removes the times from\n * the dates before calculating the difference.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of business days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many business days are between\n * // 10 January 2014 and 20 July 2014?\n * var result = differenceInBusinessDays(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 0, 10)\n * )\n * //=> 136\n */\n\nexport default function differenceInBusinessDays(dirtyDateLeft, dirtyDateRight) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  if (!isValid(dateLeft) || !isValid(dateRight)) return new Date(NaN);\n  var sign = compareAsc(dateLeft, dateRight);\n  var interval = sign > 0 ? {\n    start: dateRight,\n    end: dateLeft\n  } : {\n    start: dateLeft,\n    end: dateRight\n  };\n  var daysOfInterval = eachDayOfInterval(interval);\n  var difference = daysOfInterval.filter(function (day) {\n    return !isWeekend(day);\n  }); // Subtract 1 if interval contains ending date that falls on a weekday\n\n  var result = sign * (difference.length - (isWeekend(dateLeft) ? 0 : 1)); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","map":{"version":3,"sources":["D:/text video/geniehut-Geni-App-Code/geniehut-Geni-App-Code/front-end/node_modules/date-fns/esm/differenceInBusinessDays/index.js"],"names":["compareAsc","eachDayOfInterval","isValid","isWeekend","toDate","differenceInBusinessDays","dirtyDateLeft","dirtyDateRight","arguments","length","TypeError","dateLeft","dateRight","Date","NaN","sign","interval","start","end","daysOfInterval","difference","filter","day","result"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,wBAAvB;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,eAAe,SAASC,wBAAT,CAAkCC,aAAlC,EAAiDC,cAAjD,EAAiE;AAC9E,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIC,SAAJ,CAAc,oCAAoCF,SAAS,CAACC,MAA9C,GAAuD,UAArE,CAAN;AACD;;AAED,MAAIE,QAAQ,GAAGP,MAAM,CAACE,aAAD,CAArB;AACA,MAAIM,SAAS,GAAGR,MAAM,CAACG,cAAD,CAAtB;AACA,MAAI,CAACL,OAAO,CAACS,QAAD,CAAR,IAAsB,CAACT,OAAO,CAACU,SAAD,CAAlC,EAA+C,OAAO,IAAIC,IAAJ,CAASC,GAAT,CAAP;AAC/C,MAAIC,IAAI,GAAGf,UAAU,CAACW,QAAD,EAAWC,SAAX,CAArB;AACA,MAAII,QAAQ,GAAGD,IAAI,GAAG,CAAP,GAAW;AACxBE,IAAAA,KAAK,EAAEL,SADiB;AAExBM,IAAAA,GAAG,EAAEP;AAFmB,GAAX,GAGX;AACFM,IAAAA,KAAK,EAAEN,QADL;AAEFO,IAAAA,GAAG,EAAEN;AAFH,GAHJ;AAOA,MAAIO,cAAc,GAAGlB,iBAAiB,CAACe,QAAD,CAAtC;AACA,MAAII,UAAU,GAAGD,cAAc,CAACE,MAAf,CAAsB,UAAUC,GAAV,EAAe;AACpD,WAAO,CAACnB,SAAS,CAACmB,GAAD,CAAjB;AACD,GAFgB,CAAjB,CAjB8E,CAmB1E;;AAEJ,MAAIC,MAAM,GAAGR,IAAI,IAAIK,UAAU,CAACX,MAAX,IAAqBN,SAAS,CAACQ,QAAD,CAAT,GAAsB,CAAtB,GAA0B,CAA/C,CAAJ,CAAjB,CArB8E,CAqBL;;AAEzE,SAAOY,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmBA,MAA1B;AACD","sourcesContent":["import compareAsc from '../compareAsc/index.js';\nimport eachDayOfInterval from '../eachDayOfInterval/index.js';\nimport isValid from '../isValid/index.js';\nimport isWeekend from '../isWeekend/index.js';\nimport toDate from '../toDate/index.js';\n/**\n * @name differenceInBusinessDays\n * @category Day Helpers\n * @summary Get the number of business days between the given dates.\n *\n * @description\n * Get the number of business day periods between the given dates.\n * Business days being days that arent in the weekend.\n * Like `differenceInCalendarDays`, the function removes the times from\n * the dates before calculating the difference.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of business days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many business days are between\n * // 10 January 2014 and 20 July 2014?\n * var result = differenceInBusinessDays(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 0, 10)\n * )\n * //=> 136\n */\n\nexport default function differenceInBusinessDays(dirtyDateLeft, dirtyDateRight) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  if (!isValid(dateLeft) || !isValid(dateRight)) return new Date(NaN);\n  var sign = compareAsc(dateLeft, dateRight);\n  var interval = sign > 0 ? {\n    start: dateRight,\n    end: dateLeft\n  } : {\n    start: dateLeft,\n    end: dateRight\n  };\n  var daysOfInterval = eachDayOfInterval(interval);\n  var difference = daysOfInterval.filter(function (day) {\n    return !isWeekend(day);\n  }); // Subtract 1 if interval contains ending date that falls on a weekday\n\n  var result = sign * (difference.length - (isWeekend(dateLeft) ? 0 : 1)); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}"]},"metadata":{},"sourceType":"module"}