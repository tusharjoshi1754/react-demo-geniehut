{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\text video\\\\geniehut-Geni-App-Code\\\\geniehut-Geni-App-Code\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(workerGetSubscriptiondata),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(workerGetServiceSubscription),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(workerGetUpdateSubscription);\n\n/* eslint-disable */\nimport { takeEvery, call, put } from 'redux-saga/effects';\nimport { GET_SUBSCRIPTIONDATA, SET_SUBSCRIPTIONDATA, GET_SERVICESUBSCRIPTION, SET_SERVICESUBSCRIPTION, GET_UPDATESUBSCRIPTION, SET_UPDATESUBSCRIPTION } from '../actions';\nimport { apiUrl, appName } from \"../components/Config/Config\";\nimport Axios from 'axios';\nimport cookie from 'react-cookies';\n/* get subscription details for pro users*/\n\nexport var watchGetSubscriptiondata =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function watchGetSubscriptiondata() {\n  return _regeneratorRuntime.wrap(function watchGetSubscriptiondata$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeEvery(GET_SUBSCRIPTIONDATA, workerGetSubscriptiondata);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, watchGetSubscriptiondata);\n});\n\nfunction workerGetSubscriptiondata(_ref) {\n  var usertoken, serviceIds, uri, result, resultArr;\n  return _regeneratorRuntime.wrap(function workerGetSubscriptiondata$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          usertoken = _ref.usertoken, serviceIds = _ref.serviceIds;\n          _context2.prev = 1;\n          uri = apiUrl + 'prosubscription/prosubscription?app_name=' + appName + '&UserToken=' + usertoken + '&serviceid=' + serviceIds;\n          _context2.next = 5;\n          return call(Axios.get, uri);\n\n        case 5:\n          result = _context2.sent;\n          resultArr = [];\n          resultArr.push(result.data);\n          _context2.next = 10;\n          return put({\n            type: SET_SUBSCRIPTIONDATA,\n            value: resultArr\n          });\n\n        case 10:\n          _context2.next = 15;\n          break;\n\n        case 12:\n          _context2.prev = 12;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log('Get Page Failed');\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, null, [[1, 12]]);\n}\n/* get subscription details for pro users by individual service id*/\n\n\nexport var watchGetServiceSubscription =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function watchGetServiceSubscription() {\n  return _regeneratorRuntime.wrap(function watchGetServiceSubscription$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery(GET_SERVICESUBSCRIPTION, workerGetServiceSubscription);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, watchGetServiceSubscription);\n});\n\nfunction workerGetServiceSubscription(_ref2) {\n  var serviceIds, usertoken, uri, result, resultArr;\n  return _regeneratorRuntime.wrap(function workerGetServiceSubscription$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          serviceIds = _ref2.serviceIds, usertoken = _ref2.usertoken;\n          _context4.prev = 1;\n          uri = apiUrl + 'prosubscription/subscriptionbyId?app_name=' + appName + '&UserToken=' + usertoken + '&serviceid=' + serviceIds;\n          _context4.next = 5;\n          return call(Axios.get, uri);\n\n        case 5:\n          result = _context4.sent;\n          resultArr = [];\n          resultArr.push(result.data);\n          _context4.next = 10;\n          return put({\n            type: SET_SERVICESUBSCRIPTION,\n            value: resultArr\n          });\n\n        case 10:\n          _context4.next = 15;\n          break;\n\n        case 12:\n          _context4.prev = 12;\n          _context4.t0 = _context4[\"catch\"](1);\n          console.log('Get Page Failed');\n\n        case 15:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2, null, [[1, 12]]);\n}\n/* update subscription */\n\n\nexport var watchGetUpdateSubscription =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function watchGetUpdateSubscription() {\n  return _regeneratorRuntime.wrap(function watchGetUpdateSubscription$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(GET_UPDATESUBSCRIPTION, workerGetUpdateSubscription);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, watchGetUpdateSubscription);\n});\n\nfunction workerGetUpdateSubscription(_ref3) {\n  var formPayload, result, resultArr;\n  return _regeneratorRuntime.wrap(function workerGetUpdateSubscription$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          formPayload = _ref3.formPayload;\n          _context6.prev = 1;\n          _context6.next = 4;\n          return call(getUpdateSubscription, formPayload);\n\n        case 4:\n          result = _context6.sent;\n          resultArr = [];\n          resultArr.push(result.data);\n          _context6.next = 9;\n          return put({\n            type: SET_UPDATESUBSCRIPTION,\n            value: resultArr\n          });\n\n        case 9:\n          _context6.next = 14;\n          break;\n\n        case 11:\n          _context6.prev = 11;\n          _context6.t0 = _context6[\"catch\"](1);\n          console.log('get data failed');\n\n        case 14:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked3, null, [[1, 11]]);\n}\n\nfunction getUpdateSubscription(formPayload) {\n  return Axios.post(apiUrl + 'prosubscription/updatesubscription', formPayload);\n}","map":{"version":3,"sources":["D:/text video/geniehut-Geni-App-Code/geniehut-Geni-App-Code/front-end/src/sagas/subscription.js"],"names":["workerGetSubscriptiondata","workerGetServiceSubscription","workerGetUpdateSubscription","takeEvery","call","put","GET_SUBSCRIPTIONDATA","SET_SUBSCRIPTIONDATA","GET_SERVICESUBSCRIPTION","SET_SERVICESUBSCRIPTION","GET_UPDATESUBSCRIPTION","SET_UPDATESUBSCRIPTION","apiUrl","appName","Axios","cookie","watchGetSubscriptiondata","usertoken","serviceIds","uri","get","result","resultArr","push","data","type","value","console","log","watchGetServiceSubscription","watchGetUpdateSubscription","formPayload","getUpdateSubscription","post"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport { takeEvery, call, put } from 'redux-saga/effects';\nimport { GET_SUBSCRIPTIONDATA, SET_SUBSCRIPTIONDATA, GET_SERVICESUBSCRIPTION, SET_SERVICESUBSCRIPTION, GET_UPDATESUBSCRIPTION, SET_UPDATESUBSCRIPTION } from '../actions';\nimport {apiUrl,appName} from \"../components/Config/Config\";\nimport Axios from 'axios';\nimport cookie from 'react-cookies';\n\n/* get subscription details for pro users*/\n\nexport const watchGetSubscriptiondata = function* () {\n  yield takeEvery(GET_SUBSCRIPTIONDATA, workerGetSubscriptiondata);\n}\n\nfunction* workerGetSubscriptiondata( { usertoken, serviceIds } ) {\n  try {\n    const uri = apiUrl+'prosubscription/prosubscription?app_name='+appName+'&UserToken='+usertoken+'&serviceid='+serviceIds;\n    const result = yield call(Axios.get, uri);\n  var resultArr = [];\n  resultArr.push(result.data);\n    yield put({ type: SET_SUBSCRIPTIONDATA, value: resultArr });\n  } \n  catch {\n    console.log('Get Page Failed');\n  }\n}\n\n/* get subscription details for pro users by individual service id*/\n\nexport const watchGetServiceSubscription = function* () {\n  yield takeEvery(GET_SERVICESUBSCRIPTION, workerGetServiceSubscription);\n}\n\nfunction* workerGetServiceSubscription( { serviceIds,usertoken } ) {\n  try {\n    const uri = apiUrl+'prosubscription/subscriptionbyId?app_name='+appName+'&UserToken='+usertoken+'&serviceid='+serviceIds;\n    const result = yield call(Axios.get, uri);\n  var resultArr = [];\n  resultArr.push(result.data);\n    yield put({ type: SET_SERVICESUBSCRIPTION, value: resultArr });\n  } \n  catch {\n    console.log('Get Page Failed');\n  }\n}\n\n/* update subscription */\n\nexport const watchGetUpdateSubscription = function* () {\n  yield takeEvery(GET_UPDATESUBSCRIPTION, workerGetUpdateSubscription);\n}\nfunction* workerGetUpdateSubscription({ formPayload }) {\n  try {\n  const result = yield call(getUpdateSubscription, formPayload);\n  var resultArr = [];\n  resultArr.push(result.data);\n    yield put({ type: SET_UPDATESUBSCRIPTION, value: resultArr });\n  } \n  catch {\n    console.log('get data failed');\n  }\n} \n\n\nfunction getUpdateSubscription(formPayload) {\n       return Axios.post(apiUrl+'prosubscription/updatesubscription', formPayload);\n} "]},"metadata":{},"sourceType":"module"}