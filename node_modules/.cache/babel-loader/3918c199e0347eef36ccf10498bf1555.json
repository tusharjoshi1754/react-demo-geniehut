{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\text video\\\\geniehut-Geni-App-Code\\\\geniehut-Geni-App-Code\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(workerGetAllNotification),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(workerGetHeaderNotification),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(workerGetDeleteNotification),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(workerGetReadNotify);\n\n/* eslint-disable */\nimport { takeEvery, call, put } from 'redux-saga/effects';\nimport { GET_ALLNOTIFICATION, SET_ALLNOTIFICATION, GET_DELETENOTIFICATION, SET_DELETENOTIFICATION, GET_READNOTIFY, SET_READNOTIFY, GET_HEADERNOTIFICATION, SET_HEADERNOTIFICATION } from '../actions';\nimport { apiUrl, appName } from \"../components/Config/Config\";\nimport Axios from 'axios';\nimport cookie from 'react-cookies';\n/* get notification details for all users*/\n\nexport var watchGetAllNotification =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function watchGetAllNotification() {\n  return _regeneratorRuntime.wrap(function watchGetAllNotification$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeEvery(GET_ALLNOTIFICATION, workerGetAllNotification);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, watchGetAllNotification);\n});\n\nfunction workerGetAllNotification(_ref) {\n  var usertoken, page, uri, result, resultArr;\n  return _regeneratorRuntime.wrap(function workerGetAllNotification$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          usertoken = _ref.usertoken, page = _ref.page;\n          _context2.prev = 1;\n          uri = apiUrl + 'notification/notification?app_name=' + appName + '&userToken=' + usertoken + '&page=' + page;\n          _context2.next = 5;\n          return call(Axios.get, uri);\n\n        case 5:\n          result = _context2.sent;\n          resultArr = [];\n          resultArr.push(result.data);\n          _context2.next = 10;\n          return put({\n            type: SET_ALLNOTIFICATION,\n            value: resultArr\n          });\n\n        case 10:\n          _context2.next = 15;\n          break;\n\n        case 12:\n          _context2.prev = 12;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log('Get Page Failed');\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, null, [[1, 12]]);\n}\n/* get notification details for all users*/\n\n\nexport var watchGetHeaderNotification =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function watchGetHeaderNotification() {\n  return _regeneratorRuntime.wrap(function watchGetHeaderNotification$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery(GET_HEADERNOTIFICATION, workerGetHeaderNotification);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, watchGetHeaderNotification);\n});\n\nfunction workerGetHeaderNotification(_ref2) {\n  var usertoken, page, uri, result, resultArr;\n  return _regeneratorRuntime.wrap(function workerGetHeaderNotification$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          usertoken = _ref2.usertoken, page = _ref2.page;\n          _context4.prev = 1;\n          uri = apiUrl + 'notification/notification?app_name=' + appName + '&userToken=' + usertoken + '&page=' + page;\n          _context4.next = 5;\n          return call(Axios.get, uri);\n\n        case 5:\n          result = _context4.sent;\n          resultArr = [];\n          resultArr.push(result.data);\n          _context4.next = 10;\n          return put({\n            type: SET_HEADERNOTIFICATION,\n            value: resultArr\n          });\n\n        case 10:\n          _context4.next = 15;\n          break;\n\n        case 12:\n          _context4.prev = 12;\n          _context4.t0 = _context4[\"catch\"](1);\n          console.log('Get Page Failed');\n\n        case 15:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2, null, [[1, 12]]);\n}\n/* Delet All notification*/\n\n\nexport var watchGetDeleteNotification =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function watchGetDeleteNotification() {\n  return _regeneratorRuntime.wrap(function watchGetDeleteNotification$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(GET_DELETENOTIFICATION, workerGetDeleteNotification);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, watchGetDeleteNotification);\n});\n\nfunction workerGetDeleteNotification(_ref3) {\n  var usertoken, notifyId, uri, result, resultArr;\n  return _regeneratorRuntime.wrap(function workerGetDeleteNotification$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          usertoken = _ref3.usertoken, notifyId = _ref3.notifyId;\n          _context6.prev = 1;\n          uri = apiUrl + 'notification/deletenotify?app_name=' + appName + '&userToken=' + usertoken + '&notifyId=' + notifyId;\n          _context6.next = 5;\n          return call(Axios.get, uri);\n\n        case 5:\n          result = _context6.sent;\n          resultArr = [];\n          resultArr.push(result.data);\n          _context6.next = 10;\n          return put({\n            type: SET_DELETENOTIFICATION,\n            value: resultArr\n          });\n\n        case 10:\n          _context6.next = 15;\n          break;\n\n        case 12:\n          _context6.prev = 12;\n          _context6.t0 = _context6[\"catch\"](1);\n          console.log('Get Page Failed');\n\n        case 15:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked3, null, [[1, 12]]);\n}\n/* Read notification */\n\n\nexport var watchGetReadNotify =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function watchGetReadNotify() {\n  return _regeneratorRuntime.wrap(function watchGetReadNotify$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeEvery(GET_READNOTIFY, workerGetReadNotify);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, watchGetReadNotify);\n});\n\nfunction workerGetReadNotify(_ref4) {\n  var usertoken, notifyId, uri, result, resultArr;\n  return _regeneratorRuntime.wrap(function workerGetReadNotify$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          usertoken = _ref4.usertoken, notifyId = _ref4.notifyId;\n          _context8.prev = 1;\n          uri = apiUrl + 'notification/readnotify?app_name=' + appName + '&userToken=' + usertoken + '&notifyId=' + notifyId;\n          _context8.next = 5;\n          return call(Axios.get, uri);\n\n        case 5:\n          result = _context8.sent;\n          resultArr = [];\n          resultArr.push(result.data);\n          _context8.next = 10;\n          return put({\n            type: SET_READNOTIFY,\n            value: resultArr\n          });\n\n        case 10:\n          _context8.next = 15;\n          break;\n\n        case 12:\n          _context8.prev = 12;\n          _context8.t0 = _context8[\"catch\"](1);\n          console.log('Get Page Failed');\n\n        case 15:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked4, null, [[1, 12]]);\n}","map":{"version":3,"sources":["D:/text video/geniehut-Geni-App-Code/geniehut-Geni-App-Code/front-end/src/sagas/notification.js"],"names":["workerGetAllNotification","workerGetHeaderNotification","workerGetDeleteNotification","workerGetReadNotify","takeEvery","call","put","GET_ALLNOTIFICATION","SET_ALLNOTIFICATION","GET_DELETENOTIFICATION","SET_DELETENOTIFICATION","GET_READNOTIFY","SET_READNOTIFY","GET_HEADERNOTIFICATION","SET_HEADERNOTIFICATION","apiUrl","appName","Axios","cookie","watchGetAllNotification","usertoken","page","uri","get","result","resultArr","push","data","type","value","console","log","watchGetHeaderNotification","watchGetDeleteNotification","notifyId","watchGetReadNotify"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport { takeEvery, call, put } from 'redux-saga/effects';\nimport { GET_ALLNOTIFICATION, SET_ALLNOTIFICATION, GET_DELETENOTIFICATION, SET_DELETENOTIFICATION, GET_READNOTIFY, SET_READNOTIFY, GET_HEADERNOTIFICATION, SET_HEADERNOTIFICATION } from '../actions';\nimport {apiUrl,appName} from \"../components/Config/Config\";\nimport Axios from 'axios';\nimport cookie from 'react-cookies';\n\n/* get notification details for all users*/\n\nexport const watchGetAllNotification = function* () {\n  yield takeEvery(GET_ALLNOTIFICATION, workerGetAllNotification);\n}\n\nfunction* workerGetAllNotification( { usertoken, page } ) {\n  try {\n    const uri = apiUrl+'notification/notification?app_name='+appName+'&userToken='+usertoken+'&page='+page;\n    const result = yield call(Axios.get, uri);\n    var resultArr = [];\n    resultArr.push(result.data);\n    yield put({ type: SET_ALLNOTIFICATION, value: resultArr });\n  } \n  catch {\n    console.log('Get Page Failed');\n  }\n}\n\n\n/* get notification details for all users*/\n\nexport const watchGetHeaderNotification = function* () {\n  yield takeEvery(GET_HEADERNOTIFICATION, workerGetHeaderNotification);\n}\n\nfunction* workerGetHeaderNotification( { usertoken, page } ) {\n  try {\n    const uri = apiUrl+'notification/notification?app_name='+appName+'&userToken='+usertoken+'&page='+page;\n    const result = yield call(Axios.get, uri);\n    var resultArr = [];\n    resultArr.push(result.data);\n    yield put({ type: SET_HEADERNOTIFICATION, value: resultArr });\n  } \n  catch {\n    console.log('Get Page Failed');\n  }\n}\n\n\n/* Delet All notification*/\n\nexport const watchGetDeleteNotification = function* () {\n  yield takeEvery(GET_DELETENOTIFICATION, workerGetDeleteNotification);\n}\n\nfunction* workerGetDeleteNotification( { usertoken, notifyId } ) {\n  try {\n    const uri = apiUrl+'notification/deletenotify?app_name='+appName+'&userToken='+usertoken+'&notifyId='+notifyId;\n    const result = yield call(Axios.get, uri);\n    var resultArr = [];\n    resultArr.push(result.data);\n    yield put({ type: SET_DELETENOTIFICATION, value: resultArr });\n  } \n  catch {\n    console.log('Get Page Failed');\n  }\n}\n\n/* Read notification */\n\nexport const watchGetReadNotify = function* () {\n  yield takeEvery(GET_READNOTIFY, workerGetReadNotify);\n}\n\nfunction* workerGetReadNotify( { usertoken, notifyId } ) {\n  try {\n    const uri = apiUrl+'notification/readnotify?app_name='+appName+'&userToken='+usertoken+'&notifyId='+notifyId;\n    const result = yield call(Axios.get, uri);\n    var resultArr = [];\n    resultArr.push(result.data);\n    yield put({ type: SET_READNOTIFY, value: resultArr });\n  } \n  catch {\n    console.log('Get Page Failed');\n  }\n}"]},"metadata":{},"sourceType":"module"}