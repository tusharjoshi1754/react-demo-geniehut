{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\text video\\\\geniehut-Geni-App-Code\\\\geniehut-Geni-App-Code\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(workerGetProQuestions);\n\n/* eslint-disable */\nimport { takeEvery, call, put } from 'redux-saga/effects';\nimport { GET_PRO_QUESTIONS, SET_PRO_QUESTIONS } from '../actions';\nimport { apiUrl, appName } from \"../components/Config/Config\";\nimport Axios from 'axios';\nimport cookie from 'react-cookies';\nexport var watchGetProQuestions =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function watchGetProQuestions() {\n  return _regeneratorRuntime.wrap(function watchGetProQuestions$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeEvery(GET_PRO_QUESTIONS, workerGetProQuestions);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, watchGetProQuestions);\n});\n\nfunction workerGetProQuestions(params) {\n  var result, resultArr;\n  return _regeneratorRuntime.wrap(function workerGetProQuestions$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(GetProQuestions, params);\n\n        case 3:\n          result = _context2.sent;\n          resultArr = [];\n          resultArr.push(result.data);\n          _context2.next = 8;\n          return put({\n            type: SET_PRO_QUESTIONS,\n            value: resultArr\n          });\n\n        case 8:\n          _context2.next = 13;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log('login failed');\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction GetProQuestions(params) {\n  console.log(params);\n  return Axios.get(apiUrl + 'genpro/proQuestion?' + params.params);\n}","map":{"version":3,"sources":["D:/text video/geniehut-Geni-App-Code/geniehut-Geni-App-Code/front-end/src/sagas/proquestions.js"],"names":["workerGetProQuestions","takeEvery","call","put","GET_PRO_QUESTIONS","SET_PRO_QUESTIONS","apiUrl","appName","Axios","cookie","watchGetProQuestions","params","GetProQuestions","result","resultArr","push","data","type","value","console","log","get"],"mappings":";;;;yBAWUA,qB;;AAXV;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,YAArD;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,6BAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEA,OAAO,IAAMC,oBAAoB;AAAA;AAAA,yBAAG,SAAvBA,oBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAClC,iBAAMT,SAAS,CAACG,iBAAD,EAAoBJ,qBAApB,CAAf;;AADkC;AAAA;AAAA;AAAA;AAAA;AAAA,KAAvBU,oBAAuB;AAAA,CAAH,CAA1B;;AAIP,SAAUV,qBAAV,CAAgCW,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMT,IAAI,CAACU,eAAD,EAAkBD,MAAlB,CAAV;;AAFnB;AAEUE,UAAAA,MAFV;AAGQC,UAAAA,SAHR,GAGoB,EAHpB;AAIGA,UAAAA,SAAS,CAACC,IAAV,CAAeF,MAAM,CAACG,IAAtB;AAJH;AAKI,iBAAMb,GAAG,CAAC;AAAEc,YAAAA,IAAI,EAAEZ,iBAAR;AAA2Ba,YAAAA,KAAK,EAAEJ;AAAlC,WAAD,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIK,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,SAASR,eAAT,CAAyBD,MAAzB,EAAiC;AAC/BQ,EAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACE,SAAOH,KAAK,CAACa,GAAN,CAAUf,MAAM,GAAC,qBAAP,GAA6BK,MAAM,CAACA,MAA9C,CAAP;AACH","sourcesContent":["/* eslint-disable */\nimport { takeEvery, call, put } from 'redux-saga/effects';\nimport { GET_PRO_QUESTIONS, SET_PRO_QUESTIONS } from '../actions';\nimport { apiUrl, appName } from \"../components/Config/Config\";\nimport Axios from 'axios';\nimport cookie from 'react-cookies';\n\nexport const watchGetProQuestions = function* () {\n  yield takeEvery(GET_PRO_QUESTIONS, workerGetProQuestions);\n}\n\nfunction* workerGetProQuestions(params) {\n  try {\n    const result = yield call(GetProQuestions, params);    \n    var resultArr = [];\n\t  resultArr.push(result.data);\n    yield put({ type: SET_PRO_QUESTIONS, value: resultArr });\n  } \n  catch {\n    console.log('login failed');\n  }\n} \n\n\nfunction GetProQuestions(params) {\n  console.log(params);\n    return Axios.get(apiUrl+'genpro/proQuestion?'+params.params);\n} "]},"metadata":{},"sourceType":"module"}