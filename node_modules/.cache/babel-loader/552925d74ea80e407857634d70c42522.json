{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\text video\\\\geniehut-Geni-App-Code\\\\geniehut-Geni-App-Code\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(workerGetIpData);\n\n/* eslint-disable */\nimport { takeEvery, call, put } from 'redux-saga/effects';\nimport { GET_IPDATA, SET_IPDATA } from '../actions';\nimport { apiUrl, deliveryId } from \"../components/Config/Config\";\nimport Axios from 'axios';\nimport cookie from 'react-cookies';\nexport var watchGetIpData =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function watchGetIpData() {\n  return _regeneratorRuntime.wrap(function watchGetIpData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeEvery(GET_IPDATA, workerGetIpData);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, watchGetIpData);\n});\n\nfunction workerGetIpData(_ref) {\n  var ipaddress, result, resultArr;\n  return _regeneratorRuntime.wrap(function workerGetIpData$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          ipaddress = _ref.ipaddress;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(getIpData, ipaddress);\n\n        case 4:\n          result = _context2.sent;\n          resultArr = [];\n          resultArr.push(result.data);\n          _context2.next = 9;\n          return put({\n            type: SET_IPDATA,\n            value: resultArr\n          });\n\n        case 9:\n          _context2.next = 14;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log('get data failed');\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, null, [[1, 11]]);\n}\n\nfunction getIpData(ipaddress) {\n  return Axios.post(apiUrl + 'user/user_ipdetails', ipaddress);\n}","map":{"version":3,"sources":["D:/text video/geniehut-Geni-App-Code/geniehut-Geni-App-Code/front-end/src/sagas/ip.js"],"names":["workerGetIpData","takeEvery","call","put","GET_IPDATA","SET_IPDATA","apiUrl","deliveryId","Axios","cookie","watchGetIpData","ipaddress","getIpData","result","resultArr","push","data","type","value","console","log","post"],"mappings":";;;;yBAWUA,e;;AAXV;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,YAAvC;AACA,SAAQC,MAAR,EAAgBC,UAAhB,QAAkC,6BAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEA,OAAO,IAAMC,cAAc;AAAA;AAAA,yBAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5B,iBAAMT,SAAS,CAACG,UAAD,EAAaJ,eAAb,CAAf;;AAD4B;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjBU,cAAiB;AAAA,CAAH,CAApB;;AAIP,SAAUV,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4BW,UAAAA,SAA5B,QAA4BA,SAA5B;AAAA;AAAA;AAEgB,iBAAMT,IAAI,CAACU,SAAD,EAAYD,SAAZ,CAAV;;AAFhB;AAEOE,UAAAA,MAFP;AAGKC,UAAAA,SAHL,GAGiB,EAHjB;AAICA,UAAAA,SAAS,CAACC,IAAV,CAAeF,MAAM,CAACG,IAAtB;AAJD;AAKI,iBAAMb,GAAG,CAAC;AAAEc,YAAAA,IAAI,EAAEZ,UAAR;AAAoBa,YAAAA,KAAK,EAAEJ;AAA3B,WAAD,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIK,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,SAASR,SAAT,CAAmBD,SAAnB,EAA8B;AACvB,SAAOH,KAAK,CAACa,IAAN,CAAWf,MAAM,GAAC,qBAAlB,EAAyCK,SAAzC,CAAP;AACN","sourcesContent":["/* eslint-disable */\nimport { takeEvery, call, put } from 'redux-saga/effects';\nimport { GET_IPDATA, SET_IPDATA } from '../actions';\nimport {apiUrl, deliveryId } from \"../components/Config/Config\";\nimport Axios from 'axios';\nimport cookie from 'react-cookies';\n\nexport const watchGetIpData = function* () {\n  yield takeEvery(GET_IPDATA, workerGetIpData);\n}\n\nfunction* workerGetIpData({ ipaddress }) {\n  try {\n const result = yield call(getIpData, ipaddress);\n\tvar resultArr = [];\n\tresultArr.push(result.data);\n    yield put({ type: SET_IPDATA, value: resultArr });\n  } \n  catch {\n    console.log('get data failed');\n  }\n} \n\n\nfunction getIpData(ipaddress) {\n       return Axios.post(apiUrl+'user/user_ipdetails', ipaddress);\n} \n"]},"metadata":{},"sourceType":"module"}