{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\text video\\\\geniehut-Geni-App-Code\\\\geniehut-Geni-App-Code\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(workerGetProUpdateQuestions);\n\n/* eslint-disable */\nimport { takeEvery, call, put } from 'redux-saga/effects';\nimport { GET_UPDATE_PRO_QUESTIONS, SET_UPDATE_PRO_QUESTIONS } from '../actions';\nimport { apiUrl, deliveryId, appName } from \"../components/Config/Config\";\nimport Axios from 'axios';\nimport cookie from 'react-cookies';\n/* ask to call */\n\nexport var watchGetProUpdateQuestions =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function watchGetProUpdateQuestions() {\n  return _regeneratorRuntime.wrap(function watchGetProUpdateQuestions$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeEvery(GET_UPDATE_PRO_QUESTIONS, workerGetProUpdateQuestions);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, watchGetProUpdateQuestions);\n});\n\nfunction workerGetProUpdateQuestions(_ref) {\n  var formPayload, result, resultArr;\n  return _regeneratorRuntime.wrap(function workerGetProUpdateQuestions$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          formPayload = _ref.formPayload;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(getProUpdateQuestions, formPayload);\n\n        case 4:\n          result = _context2.sent;\n          resultArr = [];\n          resultArr.push(result.data);\n          _context2.next = 9;\n          return put({\n            type: SET_UPDATE_PRO_QUESTIONS,\n            value: resultArr\n          });\n\n        case 9:\n          _context2.next = 14;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log('login failed');\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, null, [[1, 11]]);\n}\n\nfunction getProUpdateQuestions(formPayload) {\n  var qs = require('qs'); //return Axios.post(apiUrl+'genpro/updateProquestions', qs.stringify(formPayload));\n\n}","map":{"version":3,"sources":["D:/text video/geniehut-Geni-App-Code/geniehut-Geni-App-Code/front-end/src/sagas/proupdatequestion.js"],"names":["workerGetProUpdateQuestions","takeEvery","call","put","GET_UPDATE_PRO_QUESTIONS","SET_UPDATE_PRO_QUESTIONS","apiUrl","deliveryId","appName","Axios","cookie","watchGetProUpdateQuestions","formPayload","getProUpdateQuestions","result","resultArr","push","data","type","value","console","log","qs","require"],"mappings":";;;;yBAaUA,2B;;AAbV;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,SAAQC,wBAAR,EAAkCC,wBAAlC,QAAiE,YAAjE;AACA,SAAQC,MAAR,EAAgBC,UAAhB,EAA4BC,OAA5B,QAA2C,6BAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEA;;AAEA,OAAO,IAAMC,0BAA0B;AAAA;AAAA,yBAAG,SAA7BA,0BAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AACxC,iBAAMV,SAAS,CAACG,wBAAD,EAA2BJ,2BAA3B,CAAf;;AADwC;AAAA;AAAA;AAAA;AAAA;AAAA,KAA7BW,0BAA6B;AAAA,CAAH,CAAhC;;AAIP,SAAUX,2BAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwCY,UAAAA,WAAxC,QAAwCA,WAAxC;AAAA;AAAA;AAEmB,iBAAMV,IAAI,CAACW,qBAAD,EAAwBD,WAAxB,CAAV;;AAFnB;AAEUE,UAAAA,MAFV;AAGQC,UAAAA,SAHR,GAGoB,EAHpB;AAIIA,UAAAA,SAAS,CAACC,IAAV,CAAeF,MAAM,CAACG,IAAtB;AAJJ;AAKI,iBAAMd,GAAG,CAAC;AAAEe,YAAAA,IAAI,EAAEb,wBAAR;AAAkCc,YAAAA,KAAK,EAAEJ;AAAzC,WAAD,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIK,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,SAASR,qBAAT,CAA+BD,WAA/B,EAA4C;AAC1C,MAAIU,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB,CAD0C,CAEzC;;AACF","sourcesContent":["/* eslint-disable */\nimport { takeEvery, call, put } from 'redux-saga/effects';\nimport {GET_UPDATE_PRO_QUESTIONS, SET_UPDATE_PRO_QUESTIONS} from '../actions';\nimport {apiUrl, deliveryId, appName } from \"../components/Config/Config\";\nimport Axios from 'axios';\nimport cookie from 'react-cookies';\n\n/* ask to call */\n\nexport const watchGetProUpdateQuestions = function* () {\n  yield takeEvery(GET_UPDATE_PRO_QUESTIONS, workerGetProUpdateQuestions);\n}\n\nfunction* workerGetProUpdateQuestions({ formPayload }) {\n  try {      \n    const result = yield call(getProUpdateQuestions, formPayload);\n    var resultArr = [];\n    resultArr.push(result.data);\n    yield put({ type: SET_UPDATE_PRO_QUESTIONS, value: resultArr });\n  } \n  catch {\n    console.log('login failed');\n  }\n}\nfunction getProUpdateQuestions(formPayload) {\n  var qs = require('qs');\n   //return Axios.post(apiUrl+'genpro/updateProquestions', qs.stringify(formPayload));\n}\n"]},"metadata":{},"sourceType":"module"}