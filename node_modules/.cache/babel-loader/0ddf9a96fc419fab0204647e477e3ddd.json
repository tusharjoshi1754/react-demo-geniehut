{"ast":null,"code":"import _defineProperty from \"D:\\\\text video\\\\geniehut-Geni-App-Code\\\\geniehut-Geni-App-Code\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"D:\\\\text video\\\\geniehut-Geni-App-Code\\\\geniehut-Geni-App-Code\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\text video\\\\geniehut-Geni-App-Code\\\\geniehut-Geni-App-Code\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\text video\\\\geniehut-Geni-App-Code\\\\geniehut-Geni-App-Code\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\text video\\\\geniehut-Geni-App-Code\\\\geniehut-Geni-App-Code\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"D:\\\\text video\\\\geniehut-Geni-App-Code\\\\geniehut-Geni-App-Code\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"D:\\\\text video\\\\geniehut-Geni-App-Code\\\\geniehut-Geni-App-Code\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\text video\\\\geniehut-Geni-App-Code\\\\geniehut-Geni-App-Code\\\\front-end\\\\src\\\\components\\\\Customer\\\\GenMessage.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Footer from '../Layout/Footer';\nimport WebChatBanner from '../../common/images/web-chat-banner.png';\nimport SendBtn from '../../common/images/send_icon.png';\nimport { GET_GEN_MESSAGE, GET_CREATE_MESSAGE } from '../../actions';\nimport { LoadingSec, LoadImage, chartDate, formatAMPM, Capitalize } from '../Helpers/SettingHelper';\nimport $ from 'jquery';\n\nvar GenMessage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GenMessage, _Component);\n\n  function GenMessage(props) {\n    var _this;\n\n    _classCallCheck(this, GenMessage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GenMessage).call(this, props));\n\n    if (typeof _this.props.match.params.MessageID === \"undefined\" || _this.props.match.params.MessageID === \"\") {\n      _this.props.history.push({\n        pathname: '/'\n      });\n    }\n\n    _this.state = {\n      MessageID: _this.props.match.params.MessageID,\n      message: '',\n      keywords: '',\n      mloading: true,\n      firstLoad: true,\n      old_Date: '',\n      NewMessage: '',\n      error: '',\n      chat_points: '',\n      hidechat: false\n    };\n    _this.handleInputChange = _this.handleInputChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(GenMessage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var MessageID = this.state.MessageID.split('_');\n      this.props.getGenMessage(MessageID[2], MessageID[3]);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(Props) {\n      if (Props.genmessage !== this.props.genmessage) {\n        this.setState({\n          mloading: false\n        });\n\n        if (Props.genmessage[0].status === 'success') {\n          if (Props.genmessage[0].result_set.transaction_details !== null && Props.genmessage[0].result_set.transaction_details !== '') {\n            var current = this;\n            var MessageID3 = this.state.MessageID.split('_');\n            setTimeout(function () {\n              current.props.getGenMessage(MessageID3[2], MessageID3[3]);\n            }, 5000);\n            this.setState({\n              NewMessage: '',\n              transDetails: Props.genmessage[0].result_set.transaction_details,\n              chat_points: Props.genmessage[0].result_set.chat_points,\n              history: Props.genmessage[0].result_set.call_history\n            }, function () {\n              this.mesgInfo();\n              this.displayMessage();\n            });\n\n            if (Props.genmessage[0].result_set.transaction_details.receiver_points < Props.genmessage[0].result_set.chat_points) {\n              this.setState({\n                hidechat: true\n              });\n            }\n          }\n        }\n      }\n\n      if (Props.createmessage !== this.props.createmessage) {\n        this.setState({\n          keywords: ''\n        });\n      }\n    }\n  }, {\n    key: \"handleInputChange\",\n    value: function handleInputChange(event) {\n      var _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n      this.setState(_defineProperty({}, name, value));\n    }\n  }, {\n    key: \"displayMessage\",\n    value: function displayMessage() {\n      var _this2 = this;\n\n      var message = '';\n\n      if (this.state.history !== '' && typeof this.state.history !== \"undefined\" && this.state.history.length > 0) {\n        var MessageID2 = this.state.MessageID.split('_');\n        var old_Date = '';\n        message = this.state.history.map(function (item, index) {\n          var classDetails = '';\n\n          if (MessageID2[1] !== item.sender_type) {\n            classDetails = 'web-chat-row wcr-right';\n          } else {\n            classDetails = 'web-chat-row wcr-left';\n          }\n\n          var photo = \"\";\n\n          if (item.sender_type === \"c\") {\n            photo = _this2.state.transDetails.reciever_img;\n          } else {\n            photo = _this2.state.transDetails.provider_img;\n          }\n\n          var cdate = chartDate(item.created_on);\n          return React.createElement(\"div\", {\n            key: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 90\n            },\n            __self: this\n          }, old_Date !== cdate && React.createElement(\"div\", {\n            class: \"web-chat-time-row\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            class: \"webtime-box\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93\n            },\n            __self: this\n          }, cdate, React.createElement(\"span\", {\n            style: {\n              display: 'none'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 95\n            },\n            __self: this\n          }, old_Date = cdate))), React.createElement(\"div\", {\n            className: classDetails,\n            key: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"web-chat-row-inner\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"web-chat-text\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }, item.genmessage), React.createElement(\"div\", {\n            class: \"time-box\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103\n            },\n            __self: this\n          }, formatAMPM(item.created_on))), React.createElement(\"img\", {\n            src: LoadImage(photo, 'profile'),\n            alt: \"\",\n            className: \"wcr-icon\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107\n            },\n            __self: this\n          }))));\n        });\n      } else {\n        message = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, \"Chat starts here!\");\n      }\n\n      this.setState({\n        message: message\n      }, function () {\n        if (this.state.firstLoad === true) {\n          this.scrollMessage();\n        }\n\n        this.setState({\n          firstLoad: false\n        });\n      });\n    }\n  }, {\n    key: \"loadOlddata\",\n    value: function loadOlddata(old_Date) {\n      this.setState({\n        old_Date: old_Date\n      });\n    }\n  }, {\n    key: \"createMessage\",\n    value: function createMessage() {\n      if (this.state.keywords !== '') {\n        this.setState({\n          error: ''\n        });\n        var MessageID1 = this.state.MessageID.split('_');\n        var formPayload = {\n          call_id: MessageID1[2],\n          type: MessageID1[1],\n          chattype: MessageID1[3],\n          message: this.state.keywords\n        };\n        this.scrollMessage();\n        var photo = \"\";\n\n        if (MessageID1[1] === \"c\") {\n          photo = this.state.transDetails.provider_img;\n        } else {\n          photo = this.state.transDetails.reciever_img;\n        }\n        /*let msg = (<div>\n            <div class=\"web-chat-row wcr-right\">\n                <div class=\"web-chat-row-inner\">\n                    <div class=\"web-chat-text\">\n                        <p>{this.state.keywords}</p>\n                        <div class=\"time-box\">{formatAMPM(new Date())}</div>\n                    </div>\n                    <img src={LoadImage(photo, 'profile')} alt=\"\" class=\"wcr-icon\" />\n                </div>\n            </div>\n            </div>);\n        $('.web-chat-inner-body').append(msg);\n        this.setState({NewMessage:msg});*/\n\n\n        this.props.getCreateMessage(formPayload);\n        this.props.getGenMessage(MessageID1[2], MessageID1[3]);\n        this.setState({\n          mloading: true\n        });\n      } else {\n        this.setState({\n          error: 1\n        });\n      }\n    }\n  }, {\n    key: \"mesgInfo\",\n    value: function mesgInfo() {\n      var MessageID5 = this.state.MessageID.split('_');\n      var name;\n\n      if (MessageID5[1] === 'gr') {\n        name = this.state.transDetails.provider;\n      } else {\n        name = this.state.transDetails.receiver;\n      }\n\n      var mesgInfo = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, Capitalize(name)), React.createElement(\"span\", {\n        className: \"gen-category\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, MessageID5[1] === 'gr' ? 'Part-timer / Pro' : 'Customer', \", \", this.state.transDetails.services_title)), this.state.transDetails.sg_expired !== \"yes\" ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, this.state.transDetails.trans_status !== '' && typeof this.state.transDetails.trans_status !== 'undefined' && this.state.transDetails.trans_status === \"CO\" ? React.createElement(\"div\", {\n        className: \"job-status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"Complete\") : React.createElement(\"div\", {\n        className: \"job-status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \"Pending\")) : React.createElement(\"div\", {\n        className: \"job-status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"Expired\"));\n      this.setState({\n        mesgInfo: mesgInfo\n      });\n    }\n  }, {\n    key: \"scrollMessage\",\n    value: function scrollMessage() {\n      $(\".web-chat-inner-body\").animate({\n        scrollTop: $('.web-chat-row').height() * $('.web-chat-row').length\n      }, 1000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gen-message-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gen-message-banner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: WebChatBanner,\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"gen-message-box-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"web-chat-box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"web-chat-heading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, this.state.mloading === true ? React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, \"Loading...\") : this.state.mesgInfo), React.createElement(\"div\", {\n        className: \"web-chat-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"web-chat-inner-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, this.state.mloading === true ? LoadingSec : this.state.message, this.state.NewMessage)), this.state.mloading === false && this.state.transDetails.trans_status !== '' && typeof this.state.transDetails.trans_status !== 'undefined' && this.state.transDetails.trans_status !== \"CO\" && this.state.transDetails.sg_expired !== 'yes' ? React.createElement(\"div\", {\n        className: \"web-chat-footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gen-wcf-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gen-wcf-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        name: \"keywords\",\n        placeholder: \"Text you message here..\",\n        onChange: this.handleInputChange,\n        value: this.state.keywords,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }), this.state.error === 1 && React.createElement(\"span\", {\n        className: \"errorspan\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, \"Please enter message\")), React.createElement(\"div\", {\n        className: \"gen-wcf-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn gen-wcf-btn\",\n        onClick: this.createMessage.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: SendBtn,\n        alt: \"\",\n        className: \"SendBtn-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }))))) : '', this.state.chat_points && this.state.transDetails.trans_status !== \"CO\" && this.state.transDetails.sg_expired !== 'yes' && React.createElement(\"div\", {\n        className: \"mandatory-box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, \"For each message will deduct \", this.state.chat_points, \" points\"))), React.createElement(\"div\", {\n        className: \"wcf-close\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: '/',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn_orange btn_minwid register_submit animate-btn2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, \"Close\"))))), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return GenMessage;\n}(Component);\n\nvar mapStateTopProps = function mapStateTopProps(state) {\n  return {\n    genmessage: state.genmessage,\n    createmessage: state.createmessage\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getGenMessage: function getGenMessage(call_id, chattype) {\n      dispatch({\n        type: GET_GEN_MESSAGE,\n        call_id: call_id,\n        chattype: chattype\n      });\n    },\n    getCreateMessage: function getCreateMessage(formPayload) {\n      dispatch({\n        type: GET_CREATE_MESSAGE,\n        formPayload: formPayload\n      });\n    }\n  };\n};\n\nexport default connect(mapStateTopProps, mapDispatchToProps)(withRouter(GenMessage));","map":{"version":3,"sources":["D:/text video/geniehut-Geni-App-Code/geniehut-Geni-App-Code/front-end/src/components/Customer/GenMessage.js"],"names":["React","Component","Link","withRouter","connect","Footer","WebChatBanner","SendBtn","GET_GEN_MESSAGE","GET_CREATE_MESSAGE","LoadingSec","LoadImage","chartDate","formatAMPM","Capitalize","$","GenMessage","props","match","params","MessageID","history","push","pathname","state","message","keywords","mloading","firstLoad","old_Date","NewMessage","error","chat_points","hidechat","handleInputChange","bind","split","getGenMessage","Props","genmessage","setState","status","result_set","transaction_details","current","MessageID3","setTimeout","transDetails","call_history","mesgInfo","displayMessage","receiver_points","createmessage","event","target","name","value","length","MessageID2","map","item","index","classDetails","sender_type","photo","reciever_img","provider_img","cdate","created_on","display","scrollMessage","MessageID1","formPayload","call_id","type","chattype","getCreateMessage","MessageID5","provider","receiver","services_title","sg_expired","trans_status","animate","scrollTop","height","createMessage","mapStateTopProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Footer from '../Layout/Footer';\nimport WebChatBanner from '../../common/images/web-chat-banner.png';\nimport SendBtn from '../../common/images/send_icon.png';\nimport { GET_GEN_MESSAGE, GET_CREATE_MESSAGE } from '../../actions';\nimport {LoadingSec, LoadImage, chartDate, formatAMPM, Capitalize} from '../Helpers/SettingHelper';\nimport $ from 'jquery';\nclass GenMessage extends Component {\n    constructor(props) {\n        super(props);\n        if(typeof this.props.match.params.MessageID===\"undefined\" || this.props.match.params.MessageID===\"\") {\n            this.props.history.push({ pathname: '/'});\n        }\n        this.state = {\n            MessageID:this.props.match.params.MessageID,\n            message:'',\n            keywords:'',\n            mloading:true,\n            firstLoad:true,\n            old_Date:'',\n            NewMessage:'',\n            error:'',\n            chat_points:'',\n            hidechat: false\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);      \n    }\n    componentDidMount() {\n        const MessageID =  (this.state.MessageID).split('_');\n        this.props.getGenMessage(MessageID[2],MessageID[3]);\n       \n    }\n    componentWillReceiveProps(Props) {\n        if(Props.genmessage!== this.props.genmessage){\n            this.setState({mloading:false});\n            if(Props.genmessage[0].status === 'success'){\n                if(Props.genmessage[0].result_set.transaction_details!== null && Props.genmessage[0].result_set.transaction_details!==''){\n                const current = this;\n                const MessageID3 =  (this.state.MessageID).split('_');\n                setTimeout(function(){ current.props.getGenMessage(MessageID3[2],MessageID3[3]); }, 5000);                \n                this.setState({NewMessage:'',transDetails:Props.genmessage[0].result_set.transaction_details,chat_points:Props.genmessage[0].result_set.chat_points, history:Props.genmessage[0].result_set.call_history}, function() {\n                    this.mesgInfo();\n                    this.displayMessage();\n                });\n\n                if(Props.genmessage[0].result_set.transaction_details.receiver_points < Props.genmessage[0].result_set.chat_points) {\n                    this.setState({ hidechat : true})\n                }\n\n            }\n          }\n        }\n        if(Props.createmessage!== this.props.createmessage){\n            this.setState({keywords:''});            \n        }\n    }\n\n    handleInputChange(event) {\n      const {name, value} = event.target;\n      this.setState({[name]: value});      \n    }\n\n    displayMessage() {\n        let message = '';\n        if(this.state.history!=='' && typeof this.state.history!==\"undefined\" && this.state.history.length>0) {\n            const MessageID2 =  (this.state.MessageID).split('_');\n            let old_Date = '';\n            message = this.state.history.map((item, index)=> {\n                let classDetails = '';\n                if(MessageID2[1]!==item.sender_type) {\n                  \n                    classDetails = 'web-chat-row wcr-right';\n                }\n                else {\n                    classDetails = 'web-chat-row wcr-left';\n\n                }\n                let photo = \"\";\n                if(item.sender_type===\"c\") {\n                    photo = this.state.transDetails.reciever_img;\n                }\n                else {\n                    photo = this.state.transDetails.provider_img;\n                }\n                let cdate = chartDate(item.created_on);\n\n                return (\n                    <div key={index}>\n                        { (old_Date!==cdate) &&\n                            <div class=\"web-chat-time-row\">\n                                <div class=\"webtime-box\">\n                                    {cdate}\n                                    <span style={{display:'none'}}>{old_Date = cdate}</span>\n                                </div>\n                            </div>\n                        }\n                        <div className={classDetails} key={index}>\n                            <div className=\"web-chat-row-inner\">\n                                <div className=\"web-chat-text\">\n                                    <p>{item.genmessage}</p>\n                                    <div class=\"time-box\">\n                                        {formatAMPM(item.created_on)}\n                                    </div>\n                                </div>\n                                <img src={LoadImage(photo, 'profile')} alt=\"\" className=\"wcr-icon\" />\n                            </div>\n                        </div>\n                    </div>\n                );\n            });\n        }\n        else {\n            message = (\n                <div>Chat starts here!</div>\n            )\n        }\n        this.setState({message:message}, function() {\n             if(this.state.firstLoad===true) {\n                this.scrollMessage();\n             }\n             this.setState({firstLoad:false});\n        });\n    }\n    loadOlddata(old_Date) {\n        this.setState({old_Date:old_Date});\n    }\n    createMessage(){\n        if(this.state.keywords!=='') {\n            this.setState({error:''});\n            const MessageID1 =  (this.state.MessageID).split('_');\n            const formPayload = {\n                call_id    : MessageID1[2],\n                type       : MessageID1[1],\n                chattype   : MessageID1[3],\n                message    : this.state.keywords,\n            };\n            this.scrollMessage();\n            let photo = \"\";\n            if(MessageID1[1]===\"c\") {\n                photo = this.state.transDetails.provider_img;           \n            }\n            else {\n                photo = this.state.transDetails.reciever_img;\n            }\n            /*let msg = (<div>\n                <div class=\"web-chat-row wcr-right\">\n                    <div class=\"web-chat-row-inner\">\n                        <div class=\"web-chat-text\">\n                            <p>{this.state.keywords}</p>\n                            <div class=\"time-box\">{formatAMPM(new Date())}</div>\n                        </div>\n                        <img src={LoadImage(photo, 'profile')} alt=\"\" class=\"wcr-icon\" />\n                    </div>\n                </div>\n                </div>);\n            $('.web-chat-inner-body').append(msg);\n            this.setState({NewMessage:msg});*/\n           this.props.getCreateMessage(formPayload);\n           this.props.getGenMessage(MessageID1[2], MessageID1[3]);\n           this.setState({mloading:true});\n\n        }\n        else {\n            this.setState({error:1});\n        }\n    }\n    mesgInfo() {\n        const MessageID5 =  (this.state.MessageID).split('_');\n        let name;\n        if(MessageID5[1]==='gr') {\n            name = this.state.transDetails.provider;\n        }\n        else {\n            name = this.state.transDetails.receiver;\n        }\n\n         let mesgInfo = (\n         <div>\n            <h2>\n            <b>{Capitalize(name)}</b>\n            {/*<span className=\"gen-status active\"></span>*/}\n            <span className=\"gen-category\">{(MessageID5[1]==='gr')?'Part-timer / Pro':'Customer'}, {this.state.transDetails.services_title}</span>\n            </h2>\n         \n                {this.state.transDetails.sg_expired !== \"yes\" ? (\n                <div>\n                {this.state.transDetails.trans_status!=='' && typeof this.state.transDetails.trans_status!=='undefined' && this.state.transDetails.trans_status===\"CO\" ? (\n                <div className=\"job-status\">Complete</div>\n                ) : (\n                <div className=\"job-status\">Pending</div>\n                )}\n                </div>\n                ) : (\n                <div className=\"job-status\">Expired</div>\n                )}\n         </div>\n         );\n        this.setState({mesgInfo:mesgInfo});\n    }\n    scrollMessage() {\n        $(\".web-chat-inner-body\").animate({ scrollTop: ($('.web-chat-row').height()*$('.web-chat-row').length)}, 1000);\n    }\n    render() {\n        return (\n            <div>\n               <div className=\"gen-message-wrapper\">\n                   <div className=\"gen-message-banner\">\n                       <img src={WebChatBanner} alt=\"\" />\n                   </div>\n                   <div className=\"gen-message-box-wrapper\">\n                       <div className=\"web-chat-box\">\n                           <div className=\"web-chat-heading\">\n                               {(this.state.mloading===true) ? (\n                                    <span>Loading...</span>\n                                    ) : (\n                                    this.state.mesgInfo\n                                    )}\n                                \n                           </div>\n                           <div className=\"web-chat-body\">\n                                <div className=\"web-chat-inner-body\">\n                                    {(this.state.mloading===true) ? (\n                                    LoadingSec\n                                    ) : (\n                                    this.state.message\n                                    )}\n                                    {this.state.NewMessage}\n                                </div>\n                           </div>\n                            {(this.state.mloading===false) &&\n                           (this.state.transDetails.trans_status!=='' && typeof this.state.transDetails.trans_status!=='undefined' && (this.state.transDetails.trans_status!==\"CO\" && this.state.transDetails.sg_expired !=='yes'))?<div className=\"web-chat-footer\">\n                                    <div className=\"gen-wcf-wrapper\">\n                                        <div className=\"gen-wcf-input\">\n                                            <input type=\"text\" className=\"form-control\" name=\"keywords\" placeholder=\"Text you message here..\" onChange={this.handleInputChange} value={this.state.keywords}  />\n                                            {(this.state.error===1) &&\n                                                <span className=\"errorspan\">Please enter message</span>\n                                            }\n                                        </div>\n                                        <div className=\"gen-wcf-button\">\n                                        <button type=\"button\" className=\"btn gen-wcf-btn\" onClick={this.createMessage.bind(this)} ><img src={SendBtn} alt=\"\" className=\"SendBtn-icon\" /></button>\n                                        </div>\n                                    </div>\n                                </div>:''                       \n                            }\n                            {this.state.chat_points && this.state.transDetails.trans_status!==\"CO\"  && this.state.transDetails.sg_expired !=='yes' && <div className=\"mandatory-box\"><span>For each message will deduct {this.state.chat_points} points</span></div>}\n                        \n                       </div>\n                       <div className=\"wcf-close\">\n                            <Link to={'/'}><button type=\"button\" className=\"btn btn_orange btn_minwid register_submit animate-btn2\">Close</button></Link>\n                       </div>\n                   </div>\n               </div>\n               <Footer />\n            </div>\n        );\n    }\n}\n\nconst mapStateTopProps = (state) => {\n  return {\n    genmessage      : state.genmessage,\n    createmessage   : state.createmessage,\n   \n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getGenMessage: (call_id, chattype) => {\n       dispatch({ type: GET_GEN_MESSAGE, call_id, chattype});\n    },\n    getCreateMessage: (formPayload) => {\n       dispatch({ type: GET_CREATE_MESSAGE, formPayload});\n    },\n  }\n}\nexport default connect(mapStateTopProps, mapDispatchToProps)(withRouter(GenMessage));"]},"metadata":{},"sourceType":"module"}